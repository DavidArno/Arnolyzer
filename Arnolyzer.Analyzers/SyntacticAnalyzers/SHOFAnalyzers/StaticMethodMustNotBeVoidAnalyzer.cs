using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using Arnolyzer.RuleExceptionAttributes;
using Arnolyzer.SyntacticAnalyzers.Factories;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;

namespace Arnolyzer.SyntacticAnalyzers.SHOFAnalyzers
{
    [DiagnosticAnalyzer(LanguageNames.CSharp)]
    public class StaticMethodMustNotBeVoidAnalyzer : DiagnosticAnalyzer
    {
        public const string DiagnosticId = "StaticMethodMustNotBeVoid";

        private static readonly LocalizableString Title =
            LocalizableStringFactory.LocalizableResourceString(nameof(Resources.StaticMethodMustNotBeVoidTitle));
        private static readonly LocalizableString MessageFormat =
            LocalizableStringFactory.LocalizableResourceString(nameof(Resources.StaticMethodMustNotBeVoidMessageFormat));
        private static readonly LocalizableString Description =
            LocalizableStringFactory.LocalizableResourceString(nameof(Resources.StaticMethodMustNotBeVoidDescription));

        private static readonly DiagnosticDescriptor Rule =
            DiagnosticDescriptorFactory.EnabledByDefaultErrorDescriptor(AnalyzerCategories.ShofAnalyzers,
                                                                        DiagnosticId,
                                                                        Title,
                                                                        MessageFormat,
                                                                        Description);

        private static readonly List<Type> IgnoreRuleAttributes = new List<Type>
        {
            typeof(MutatesParameterAttribute),
            typeof(HasSideEffectsAttribute)
        };

        public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics => ImmutableArray.Create(Rule);

        public override void Initialize(AnalysisContext context) =>
            context.RegisterSymbolAction(AnalyzeSymbol, SymbolKind.Method);

        [MutatesParameter]
        private static void AnalyzeSymbol(SymbolAnalysisContext context)
        {
            var methodSymbol = (IMethodSymbol)context.Symbol;

            if (!CommonFunctions.AutoGenerated(methodSymbol) &&
                !CommonFunctions.HasIgnoreRuleAttribute(methodSymbol, IgnoreRuleAttributes) &&
                methodSymbol.IsStatic &&
                methodSymbol.ReturnsVoid &&
                methodSymbol.MethodKind != MethodKind.PropertySet)
            {
                context.ReportDiagnostic(Diagnostic.Create(Rule, methodSymbol.Locations[0], methodSymbol.Name));
            }
        }
    }
}