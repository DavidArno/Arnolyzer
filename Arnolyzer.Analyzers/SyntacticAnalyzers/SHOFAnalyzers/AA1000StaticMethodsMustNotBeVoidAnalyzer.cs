using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using Arnolyzer.RuleExceptionAttributes;
using Arnolyzer.SyntacticAnalyzers.Settings;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using static Arnolyzer.SyntacticAnalyzers.CommonFunctions;
using static Arnolyzer.SyntacticAnalyzers.DefaultState;
using static Microsoft.CodeAnalysis.DiagnosticSeverity;

namespace Arnolyzer.SyntacticAnalyzers.SHOFAnalyzers
{
    [DiagnosticAnalyzer(LanguageNames.CSharp)]
    public class AA1000StaticMethodsMustNotBeVoidAnalyzer : DiagnosticAnalyzer, IAnalyzerDetailsReporter
    {
        private static readonly IList<Type> SuppressionAttributes = new List<Type>
        {
            typeof(MutatesParameterAttribute),
            typeof(HasSideEffectsAttribute)
        };

        private static readonly AnalyzerDetails AA1000Details =
            new AnalyzerDetails(nameof(AA1000StaticMethodsMustNotBeVoidAnalyzer),
                                AnalyzerCategories.ShofAnalyzers,
                                EnabledByDefault,
                                Error,
                                nameof(Resources.AA1000StaticMethodsMustNotBeVoidTitle),
                                nameof(Resources.AA1000StaticMethodsMustNotBeVoidDescription),
                                nameof(Resources.AA1000StaticMethodsMustNotBeVoidMessageFormat),
                                SuppressionAttributes);

        public AnalyzerDetails GetAnalyzerDetails() => AA1000Details;

        private static readonly DiagnosticDescriptor Rule = AA1000Details.GetDiagnosticDescriptor();

        public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics => ImmutableArray.Create(Rule);

        public override void Initialize(AnalysisContext context)
        {
            context.RegisterCompilationStartAction(CompilationStart);
        }

        [HasSideEffects]
        private static void CompilationStart(CompilationStartAnalysisContext context)
        {
            context.Options.InitialiseArnolyzerSettings();
            context.RegisterSymbolAction(AnalyzeSymbol, SymbolKind.Method);
        }

        [MutatesParameter]
        private static void AnalyzeSymbol(SymbolAnalysisContext context)
        {
            var methodSymbol = (IMethodSymbol)context.Symbol;

            if (!AutoGenerated(methodSymbol) &&
                !HasIgnoreRuleAttribute(methodSymbol, SuppressionAttributes) &&
                !IgnoredFile(methodSymbol) &&
                methodSymbol.IsStatic &&
                methodSymbol.ReturnsVoid &&
                methodSymbol.MethodKind != MethodKind.PropertySet)
            {
                context.ReportDiagnostic(Diagnostic.Create(Rule, methodSymbol.Locations[0], methodSymbol.Name));
            }
        }
    }
}