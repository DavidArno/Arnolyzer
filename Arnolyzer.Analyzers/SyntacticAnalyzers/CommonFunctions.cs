using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using Arnolyzer.SyntacticAnalyzers.Settings;
using Microsoft.CodeAnalysis;
using SuccincT.Options;

namespace Arnolyzer.SyntacticAnalyzers
{
    internal static class CommonFunctions
    {
        public static bool AutoGenerated(ISymbol symbol)
        {
            var syntaxRoot = symbol.DeclaringSyntaxReferences[0].SyntaxTree.GetRoot();
            return syntaxRoot.ChildNodes()
                             .Where(n => n.HasLeadingTrivia)
                             .Any(node => node.GetLeadingTrivia().Any(t => t.ToString().Contains("<auto-generated>")));
        }

        public static bool HasIgnoreRuleAttribute(ISymbol symbol, IEnumerable<Type> attributes)
        {
            return symbol.GetAttributes()
                         .Any(s => attributes.FirstOrNone(t => MatchAttributeName(t, s.AttributeClass.Name)).HasValue);
        }

        public static bool IgnoredFile(ISymbol symbol)
        {
            var syntaxTree = symbol.DeclaringSyntaxReferences[0].SyntaxTree;
            var options = syntaxTree.ArnolyzerSettings();
            return options.IgnorePathsRegex != "" && Regex.Match(syntaxTree.FilePath, options.IgnorePathsRegex).Success;
        }

        private static bool MatchAttributeName(Type attributeType, string name) =>
            attributeType.Name.Replace("Attribute", "") == name || attributeType.Name == name;
    }
}