A property that providers a getter is likely either:
1. Violating encapsulation by providing direct read/write access to a backing field, effectively making that field public, or
2. Breaking the principle of least astonishment by manipulating the value provided to the setter, such that requesting the value
back supplies a different value to that set.

In addition, mutable properties break the immutability pattern: the value can change throughout the application. This can lead to
thread-unsafe code and can make both testing and maintenance harder.

Therefore, interfaces should not, in most cases, define setters as that forces implementing classes down the above violation routes.