<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AA1000StaticMethodsShouldNotBeVoidDescription" xml:space="preserve">
    <value>Static methods should return a value (must not be null)</value>
  </data>
  <data name="AA1000StaticMethodsShouldNotBeVoidMessageFormat" xml:space="preserve">
    <value>Static method '{0}' is void. It should return a value</value>
  </data>
  <data name="AA1000StaticMethodsShouldNotBeVoidTitle" xml:space="preserve">
    <value>AA1000-StaticMethodsShouldNotBeVoid</value>
  </data>
  <data name="AA1001StaticMethodsShouldHaveAtLeastOneParameterDescription" xml:space="preserve">
    <value>Static methods should have at least one parameter</value>
  </data>
  <data name="AA1001StaticMethodsShouldHaveAtLeastOneParameterMessageFormat" xml:space="preserve">
    <value>Static method '{0}' doesn't have any parameters. It should have at least one</value>
  </data>
  <data name="AA1001StaticMethodsShouldHaveAtLeastOneParameterTitle" xml:space="preserve">
    <value>AA1001-StaticMethodsShouldHaveAtLeastOneParameter</value>
  </data>
  <data name="AA1102InterfacePropertiesShouldBeReadOnlyDescription" xml:space="preserve">
    <value>To provide encapsulation, properties should only make getters publicly available, so interfaces should not define setters for properties.</value>
  </data>
  <data name="AA1102InterfacePropertiesShouldBeReadOnlyMessageFormat" xml:space="preserve">
    <value>Property `{0}` of interface `{1}` should not define a setter</value>
  </data>
  <data name="AA1102InterfacePropertiesShouldBeReadOnlyTitle" xml:space="preserve">
    <value>AA1102-InterfacePropertiesShouldBeReadOnly</value>
  </data>
  <data name="AA1103ClassPropertiesShouldBePubliclyReadOnlyDescription" xml:space="preserve">
    <value>Public classes should not provide publicly accessible setters for properties</value>
  </data>
  <data name="AA1103ClassPropertiesShouldBePubliclyReadOnlyMessageFormat" xml:space="preserve">
    <value>Public property `{0}` of class `{1}` should not define a public setter</value>
  </data>
  <data name="AA1103ClassPropertiesShouldBePubliclyReadOnlyTitle" xml:space="preserve">
    <value>AA1103-ClassPropertiesShouldBePubliclyReadOnly</value>
  </data>
  <data name="AA1104InnerTypesMustBePrivateDescription" xml:space="preserve">
    <value>Inner types should be treated as implementation details and encapsulated by marking them as private</value>
  </data>
  <data name="AA1104InnerTypesMustBePrivateMessageFormat" xml:space="preserve">
    <value>Type `{0}` is defined inside another type, so should be made private</value>
  </data>
  <data name="AA1104InnerTypesMustBePrivateTitle" xml:space="preserve">
    <value>AA1104-InnerTypesMustBePrivate</value>
  </data>
  <data name="AA2000DoNotUseNotImplementedExceptionDescription" xml:space="preserve">
    <value>The NotImplementedException is a direct violation of the Liskov Substitution Principle (LSP) and so must not be used</value>
  </data>
  <data name="AA2000DoNotUseNotImplementedExceptionMessageFormat" xml:space="preserve">
    <value>Throw statement uses the NotImplementedException, which is a violation of the LSP</value>
  </data>
  <data name="AA2000DoNotUseNotImplementedExceptionTitle" xml:space="preserve">
    <value>AA2000-DoNotUseNotImplementedException</value>
  </data>
  <data name="AA2001DoNotUseNotSupportedExceptionDescription" xml:space="preserve">
    <value>The NotSupportedException is a direct violation of the Liskov Substitution Principle (LSP) and so must not be used</value>
  </data>
  <data name="AA2001DoNotUseNotSupportedExceptionMessageFormat" xml:space="preserve">
    <value>Throw statement uses the NotSupportedException, which is a violation of the LSP</value>
  </data>
  <data name="AA2001DoNotUseNotSupportedExceptionTitle" xml:space="preserve">
    <value>AA2001-DoNotUseNotSupportedException</value>
  </data>
  <data name="AA2100MethodParametersMustNotBeRefOrOutDescription" xml:space="preserve">
    <value>Method parameters must not use REF or OUT parameters; all results should be via a return</value>
  </data>
  <data name="AA2100MethodParametersMustNotBeRefOrOutMessageFormat" xml:space="preserve">
    <value>Parameter `{0}` of method `{1}` must not use {2}</value>
  </data>
  <data name="AA2100MethodParametersMustNotBeRefOrOutTitle" xml:space="preserve">
    <value>AA2100-MethodParametersMustNotBeRefOrOut</value>
  </data>
  <data name="AA2103MethodShouldNotContainAndDescription" xml:space="preserve">
    <value>Method names that contain "And" often indicate a method is doing more than one thing. Consider refacting into two methods.</value>
  </data>
  <data name="AA2103MethodShouldNotContainAndMessageFormat" xml:space="preserve">
    <value>Method '{0}' contains "And", which might indicate it's doing more than one thing</value>
  </data>
  <data name="AA2103MethodShouldNotContainAndTitle" xml:space="preserve">
    <value>AA2103-MethodShouldNotContainAnd</value>
  </data>
  <data name="AA2104FileMustOnlyContainOneTypeDefinitionDescription" xml:space="preserve">
    <value>To comply with the single responsibility principle, a file should only contain one non-private type definition.</value>
  </data>
  <data name="AA2104FileMustOnlyContainOneTypeDefinitionMessageFormat" xml:space="preserve">
    <value>Type `{0}` is located in a file that contains other type definitions</value>
  </data>
  <data name="AA2104FileMustOnlyContainOneTypeDefinitionTitle" xml:space="preserve">
    <value>AA2104-FileMustOnlyContainOneTypeDefinition</value>
  </data>
</root>