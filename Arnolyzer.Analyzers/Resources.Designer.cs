//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Arnolyzer {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Arnolyzer.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static methods should return a value (must not be null).
        /// </summary>
        public static string AA1000StaticMethodsMustNotBeVoidDescription {
            get {
                return ResourceManager.GetString("AA1000StaticMethodsMustNotBeVoidDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static method &apos;{0}&apos; is void. It should return a value.
        /// </summary>
        public static string AA1000StaticMethodsMustNotBeVoidMessageFormat {
            get {
                return ResourceManager.GetString("AA1000StaticMethodsMustNotBeVoidMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AA1000-StaticMethodsMustNotBeVoid.
        /// </summary>
        public static string AA1000StaticMethodsMustNotBeVoidTitle {
            get {
                return ResourceManager.GetString("AA1000StaticMethodsMustNotBeVoidTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static methods should have at least one parameter.
        /// </summary>
        public static string AA1001StaticMethodsMustHaveAtLeastOneParameterDescription {
            get {
                return ResourceManager.GetString("AA1001StaticMethodsMustHaveAtLeastOneParameterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static method &apos;{0}&apos; doesn&apos;t have any parameters. It should have at least one.
        /// </summary>
        public static string AA1001StaticMethodsMustHaveAtLeastOneParameterMessageFormat {
            get {
                return ResourceManager.GetString("AA1001StaticMethodsMustHaveAtLeastOneParameterMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AA1001-StaticMethodsMustHaveAtLeastOneParameter.
        /// </summary>
        public static string AA1001StaticMethodsMustHaveAtLeastOneParameterTitle {
            get {
                return ResourceManager.GetString("AA1001StaticMethodsMustHaveAtLeastOneParameterTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To provide encapsulation, properties should only make getters publicly available, so interfaces should not define setters for properties..
        /// </summary>
        public static string AA1102InterfacePropertiesMustBeReadOnlyDescription {
            get {
                return ResourceManager.GetString("AA1102InterfacePropertiesMustBeReadOnlyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property `{0}` of interface `{1}` should not define a setter.
        /// </summary>
        public static string AA1102InterfacePropertiesMustBeReadOnlyMessageFormat {
            get {
                return ResourceManager.GetString("AA1102InterfacePropertiesMustBeReadOnlyMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AA1102-InterfacePropertiesMustBeReadOnly.
        /// </summary>
        public static string AA1102InterfacePropertiesMustBeReadOnlyTitle {
            get {
                return ResourceManager.GetString("AA1102InterfacePropertiesMustBeReadOnlyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public classes should not provide publicly accessible setters for properties.
        /// </summary>
        public static string AA1103ClassPropertiesMustBePubliclyReadOnlyDescription {
            get {
                return ResourceManager.GetString("AA1103ClassPropertiesMustBePubliclyReadOnlyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public property `{0}` of class `{1}` should not define a public setter.
        /// </summary>
        public static string AA1103ClassPropertiesMustBePubliclyReadOnlyMessageFormat {
            get {
                return ResourceManager.GetString("AA1103ClassPropertiesMustBePubliclyReadOnlyMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AA1103-ClassPropertiesMustBePubliclyReadOnly.
        /// </summary>
        public static string AA1103ClassPropertiesMustBePubliclyReadOnlyTitle {
            get {
                return ResourceManager.GetString("AA1103ClassPropertiesMustBePubliclyReadOnlyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inner types should be treated as implementation details and encapsulated by marking them as private.
        /// </summary>
        public static string AA1104InnerTypesMustBePrivateDescription {
            get {
                return ResourceManager.GetString("AA1104InnerTypesMustBePrivateDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type `{0}` is defined inside another type, so should be made private.
        /// </summary>
        public static string AA1104InnerTypesMustBePrivateMessageFormat {
            get {
                return ResourceManager.GetString("AA1104InnerTypesMustBePrivateMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AA1104-InnerTypesMustBePrivate.
        /// </summary>
        public static string AA1104InnerTypesMustBePrivateTitle {
            get {
                return ResourceManager.GetString("AA1104InnerTypesMustBePrivateTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NotImplementedException is a direct violation of the Liskov Substitution Principle (LSP) and so must not be used.
        /// </summary>
        public static string AA2000DoNotUseNotImplementedExceptionDescription {
            get {
                return ResourceManager.GetString("AA2000DoNotUseNotImplementedExceptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throw statement uses the NotImplementedException, which is a violation of the LSP.
        /// </summary>
        public static string AA2000DoNotUseNotImplementedExceptionMessageFormat {
            get {
                return ResourceManager.GetString("AA2000DoNotUseNotImplementedExceptionMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AA2000-DoNotUseNotImplementedException.
        /// </summary>
        public static string AA2000DoNotUseNotImplementedExceptionTitle {
            get {
                return ResourceManager.GetString("AA2000DoNotUseNotImplementedExceptionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NotSupportedException is a direct violation of the Liskov Substitution Principle (LSP) and so must not be used.
        /// </summary>
        public static string AA2001DoNotUseNotSupportedExceptionDescription {
            get {
                return ResourceManager.GetString("AA2001DoNotUseNotSupportedExceptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throw statement uses the NotSupportedException, which is a violation of the LSP.
        /// </summary>
        public static string AA2001DoNotUseNotSupportedExceptionMessageFormat {
            get {
                return ResourceManager.GetString("AA2001DoNotUseNotSupportedExceptionMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AA2001-DoNotUseNotSupportedException.
        /// </summary>
        public static string AA2001DoNotUseNotSupportedExceptionTitle {
            get {
                return ResourceManager.GetString("AA2001DoNotUseNotSupportedExceptionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method parameters must not use REF or OUT parameters; all results should be via a return.
        /// </summary>
        public static string AA2100MethodParametersMustNotBeRefOrOutDescription {
            get {
                return ResourceManager.GetString("AA2100MethodParametersMustNotBeRefOrOutDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter `{0}` of method `{1}` must not use {2}.
        /// </summary>
        public static string AA2100MethodParametersMustNotBeRefOrOutMessageFormat {
            get {
                return ResourceManager.GetString("AA2100MethodParametersMustNotBeRefOrOutMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AA2100-MethodParametersMustNotBeRefOrOut.
        /// </summary>
        public static string AA2100MethodParametersMustNotBeRefOrOutTitle {
            get {
                return ResourceManager.GetString("AA2100MethodParametersMustNotBeRefOrOutTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method names that contain &quot;And&quot; often indicate a method is doing more than one thing. Consider refacting into two methods..
        /// </summary>
        public static string AA2103MethodShouldNotContainAndDescription {
            get {
                return ResourceManager.GetString("AA2103MethodShouldNotContainAndDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; contains &quot;And&quot;, which might indicate it&apos;s doing more than one thing.
        /// </summary>
        public static string AA2103MethodShouldNotContainAndMessageFormat {
            get {
                return ResourceManager.GetString("AA2103MethodShouldNotContainAndMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AA2103-MethodShouldNotContainAnd.
        /// </summary>
        public static string AA2103MethodShouldNotContainAndTitle {
            get {
                return ResourceManager.GetString("AA2103MethodShouldNotContainAndTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To comply with the single responsibility principle, a file should only contain one non-private type definition..
        /// </summary>
        public static string AA2104FileMustOnlyContainOneTypeDefinitionDescription {
            get {
                return ResourceManager.GetString("AA2104FileMustOnlyContainOneTypeDefinitionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type `{0}` is located in a file that contains other type definitions.
        /// </summary>
        public static string AA2104FileMustOnlyContainOneTypeDefinitionMessageFormat {
            get {
                return ResourceManager.GetString("AA2104FileMustOnlyContainOneTypeDefinitionMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AA2104-FileMustOnlyContainOneTypeDefinition.
        /// </summary>
        public static string AA2104FileMustOnlyContainOneTypeDefinitionTitle {
            get {
                return ResourceManager.GetString("AA2104FileMustOnlyContainOneTypeDefinitionTitle", resourceCulture);
            }
        }
    }
}
