using System;
using Arnolyzer.SyntacticAnalyzers;
using Arnolyzer.SyntacticAnalyzers.SHOFAnalyzers;
using Arnolyzer.Tests.DiagnosticVerification;
using Microsoft.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SuccincT.Options;
using static Arnolyzer.Tests.DiagnosticVerification.DiagnosticVerifier;
using static Arnolyzer.Tests.SyntacticAnalyzers.TestFiles;

namespace Arnolyzer.Tests.SyntacticAnalyzers.SHOFAnalyzersTests
{
    [TestClass]
    public class StaticMethodMustNotBeVoidAnalyzerTests
    {
        [TestMethod]
        public void NoCode_ShouldYieldNoDiagnostics() => VerifyDiagnostics<StaticMethodMustNotBeVoidAnalyzer>(EmptyFile);

        [TestMethod]
        public void CodeWithTwoVoidMethods_YieldsTwoDiagnostics()
        {
            var commonExpected = new DiagnosticResultCommonProperties(Resources.StaticMethodMustNotBeVoidTitle,
                                                                      Resources.StaticMethodMustNotBeVoidDescription,
                                                                      DiagnosticSeverity.Error,
                                                                      AnalyzerCategories.ShofAnalyzers,
                                                                      StaticMethodMustNotBeVoidAnalyzer.DiagnosticId);
            var expected1 =
                new DiagnosticResult(commonExpected,
                                     String.Format(Resources.StaticMethodMustNotBeVoidMessageFormat, "DoNothing"),
                                     Option<DiagnosticLocation>.Some(new DiagnosticLocation(5, 28, 37)));

            var expected2 =
                new DiagnosticResult(commonExpected,
                                     String.Format(Resources.StaticMethodMustNotBeVoidMessageFormat, "StillDoNothing"),
                                     Option<DiagnosticLocation>.Some(new DiagnosticLocation(8, 28, 42)));

            VerifyDiagnostics<StaticMethodMustNotBeVoidAnalyzer>(CodeToTestStaticVoidAnalyzer, expected1, expected2);
        }

        [TestMethod]
        public void AutogeneratedCode_YieldsNoDiagnostics() =>
            VerifyDiagnostics<StaticMethodMustNotBeVoidAnalyzer>(AutogeneratedStaticVoidCode);

        [TestMethod]
        public void CodeInIgnoredFile_YieldsNoDiagnostics() =>
            VerifyDiagnostics<StaticMethodMustNotBeVoidAnalyzer>(FileThatShouldBeIgnored);

        [TestMethod]
        public void CodeWithSetters_YieldsNoDiagnostics() =>
            VerifyDiagnostics<StaticMethodMustNotBeVoidAnalyzer>(CodeToTestStaticVoidAnalyzerIgnoresSetters);

        [TestMethod]
        public void CodeWithFourVoidMethodsTwoWithIgnoreRuleAttributes_YieldsTwoDiagnostic()
        {
            var commonExpected = new DiagnosticResultCommonProperties(Resources.StaticMethodMustNotBeVoidTitle,
                                                                      Resources.StaticMethodMustNotBeVoidDescription,
                                                                      DiagnosticSeverity.Error,
                                                                      AnalyzerCategories.ShofAnalyzers,
                                                                      StaticMethodMustNotBeVoidAnalyzer.DiagnosticId);
            var expected1 =
                new DiagnosticResult(commonExpected,
                                     String.Format(Resources.StaticMethodMustNotBeVoidMessageFormat, "DoNothing1"),
                                     Option<DiagnosticLocation>.Some(new DiagnosticLocation(8, 28, 38)));

            var expected2 =
                new DiagnosticResult(commonExpected,
                                     String.Format(Resources.StaticMethodMustNotBeVoidMessageFormat, "DoNothing4"),
                                     Option<DiagnosticLocation>.Some(new DiagnosticLocation(17, 28, 38)));

            VerifyDiagnostics<StaticMethodMustNotBeVoidAnalyzer>(CodeToTestStaticVoidAnalyzerRespectsAttributes,
                                                                 expected1,
                                                                 expected2);
        }
    }
}